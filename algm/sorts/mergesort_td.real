\Note{ Real specification of merge sort (top down) for animation

\Note}

\Note{ Overview edited Linda 31 Aug 2023
\Note}

\Overview{
Mergesort is a sorting algorithm that comes in a few different "flavours".
The version of mergesort shown in this module is "top-down" mergesort, 
a recursive sorting algorithm.

In top-down mergesort, the unsorted records are recursively divided into left-half 
and right-half, without regard to the value of the items. The division continues recursively 
until each half contains only one record. Rewinding the recursion, 
we merge the subfiles on the left, starting with the two leftmost
one-record files (left- and right-side of the subfile of two records) into
a single file in which the records are in order. This merge requires  
one key comparison. We then merge the right-hand side one-record files, with one key comparison. 
Then we merge the two two-record files to form one four-record file, requiring three key comparisons, 
and continue this merge until the left-half of the original file is in sorted order.  
We then follow the same recursive procedure on the right-hand side of the file.

Because the splitting of files doesn't require any key comparisons,
but the merging does require key comparison and is therefore more costly, 
this strategy can be thought of as "easy split-hard merge", in contrast to Quicksort, 
which is "hard split-easy merge".

Because there are log n splits of the file, and a maximum of n key comparisons at each 
level of recursion, the time complexity of mergesort is O(n log n).  The vanilla-flavored version
of top-down mergesort
shown in this module does not adapt to sortedness in the file, so it is  Î¸(n log  n), that is, 
it is bounded on both the top of the bottom by n log n. 
Natural mergesort is a variant of mergesort that 
takes advantage of the initial "sortedness" of a collection of 
records to form initial sorted "runs" that may be larger than the single-record starting point in
vanilla top-down mergesort. 


There is also a "bottom-up" version of mergesort, in which the first pass through the file
is to mergesort the first two data items, by comparing keys, then the next two, etc.  
At the end of this first pass the next round of merging merges these files of two 
data items into files of four data items, using three or fewer key comparisons, and so on.
The time complexity of "bottom-up" mergesort is also O(n log n).  

Both "top-down" and "bottom-up" mergesort are stable, that is, equal keys end up in the same order
in the output that they were in in the input.  One drawback of mergesort is that it requires
O(n) extra space.    
\Overview}

\Note{
Animation should be similar to quicksort, showing stack, segment we are
working on etc.  Need extra B array for merge, with index vars for A and
B: left, mid, right, ap1, ap2, bp.  Maybe color element as they are
moved from A to B.
\Note} 


\Code{
Main
// Sort array A[left]..A[right] in ascending order
Mergesort(A, left, right)
\Expl{  We need left and right indices because the code is recursive
        and both may be different for recursive calls.
\Expl}
    if left < right
    \Expl{  Terminating condition (if there are less than two
            elements in the array segment it's already sorted).
    \Expl}
    \In{
        mid <- (left + right)/2
        sort first half, A[left]..A[mid]    \Ref MergesortL
        \Expl{ Sort elements in the first half of the array segment
        \Expl}
        \Note{ This should be animated in one step if not expanded
        \Note}
        sort second half, A[mid+1]..A[right]    \Ref MergesortR
        \Expl{ Sort elements in the second half of the array segment
        \Expl}
        \Note{ This should be animated in one step if not expanded
        \Note}
        Merge the two sorted halves, with the result in A \Ref MergeCopy
        \Expl}
    \In}
    // Done
    \Note{ Good to have this as a step in animation to clarify recursion
           (especially the base case), plus clean up stack display at end
    \Note}
\Code}

\Code{
MergesortL
    \Note{ Recursive call should be animated if this is expanded, like
      quicksort.  We add the comment below to pause the animation,
      making recursion clearer, and the animation also needs an extra
      "chunk" at the right recursion level if we hit the "back" button.
    \Note}
    // *recursively* sort the first half
    Mergesort(A, left, mid)
\Code}

\Code{
MergesortR
    \Note{ See MergesortL note
    \Note}
    // *recursively* sort the second half
    Mergesort(A, mid + 1, right)
\Code}

\Code{
MergeCopy
    Merge(A, left, mid, right, B) \Ref Merge
    \Expl{ Takes two sorted array segments, A[left..mid] and A[mid+1..right],
        and merges them together to form a single sorted array segment
        in temporary array B[left..right]
    \Expl}
    Copy elements from B[left..right] back to A[left..right]
    \Note{ Need to expand this? I dont think so.
    \Note}
    \Expl{ Since meregsort needs the extra array for the result of
        merge it is not "in place". Copying can be reduced by merging
        from A to B and from B to A in alternate levels of recursion -
        slightly more tricky coding.
    \Expl}
    \Note{ Might be better to move above to overview.
    \Note}
\Code}

\Code{
Merge
    ap1 <- left
    ap1max <- mid
    \Expl{ ap1 scans through the segment A[left..mid], "pointing at" or
        indexing elements of this array segment we copy from
    \Expl}
    ap2 <- mid+1
    ap2max <- right
    \Expl{ ap2 scans through the segment A[mid+1..right], "pointing at" or
        indexing elements of this array segment we copy from
    \Expl}
    bp <- left
    \Expl{ bp scans through the segment B[left..right], "pointing at" or
        indexing elements of this array segment we copy to
    \Expl}
    while both A segments still have elements to copy \Ref MergeWhile
    \Expl{ we scan through both A segments from left to right by 
        incrementing ap1 and ap2, copying to B as we go
    \Expl}
    \In{
        copy the smaller A element, increment its pointer and bp \Ref CopySmaller
        \Expl{ The smaller of A[ap1] and A[ap2] is copied to B[bp]
        \Expl}
    \In}
    copy any remaining elements from A to B \Ref CopyRest
    \Expl{ One of the A segments will have been completely copied;
        the other has uncopied elements
    \Expl}
\Code}

\Code{
MergeWhile
    while ap1 <= ap1max and ap2 <= ap2max
    \Expl{ Elements up to ap1max/ap2max must be copied; those before
        ap1/ap2 have been copied already
    \Expl}
\Code}

\Code{
CopySmaller
    if A[ap1] < A[ap2]
    \in{
        B[bp] <- A[ap1]
        ap1 <- ap1+1
        bp <- bp+1
        \Note{ Clearer to duplicate this in then and else branches(?)
        \Note}
    \in}
    else
    \in{
        B[bp] <- A[ap2]
        ap2 <- ap2+1
        bp <- bp+1
    \in}
\Code}

\Code{
CopyRest
    copy A[ap1..ap1max] to B[bp..]
    \Note{ Need to expand this? I dont think so.
    \Note}
    copy A[ap2..ap2max] to B[bp..]
    \Expl{ One of these copy steps will do nothing because one of the
        A segments will be empty
\Code}

\Note{
See sorts.c for an implementation of this plus other sorting algorithms
\Note}
