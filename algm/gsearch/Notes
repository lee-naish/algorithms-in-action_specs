Current status:
Prim's, BFS, Dijkstra's, A*, DFS Real specs ready for review.
gsearch.c is messy but does all of the above

Various graph search algorithms with similar structure emphasised.
DFS presentation is less natural than the recursive version but the
latter doesn't emphasise similarity. Prims is a MST algorithm rther than
search but has the same structure.

bfs.real was the "base" version. Once that was in good shape we migrated
details to the others. Prims was the base version for C code.  We now
have one C implementation with options for the different algorithms to
avoid code duplication.

Graph representation may not be the best - initially we migrated code
from other graph algorithms.

Best to move Prims to this group, even though seems in an OK state (see
below). It can be written with the same structure if we stick to one
connected component and that could be emphasised. The layout-sensitive
display of graphs, using Euclidean or Manhattan distance as cost is less
flexible for user data input but probably clearer whats going on. Could
have button for complete graph (and make edges implicit, other than
selected ones; almost everything is a frontier node after the first
step). Good to implement Kruskal's algorithm for comparison.

Previous Prim's implementation has a few problems:

Graph layout maybe not as clear visually as with implicit weights.

Fully expanded line 7 Cost[1] <- 0 really part of PQ init/update and
line 6 Parent[i] <- Null (and line 15) not related to PQ

Also, the code is designed to work for graphs with multiple connected
components, even though thats at odds with the explanation (and more
complicated).  Probably best to stick with doing a single connected
component, leading to a similar structure to the other algorithms, and
mention how it can be extended to find a minimal spanning forest in the
more general case (just have an outer loop that calls the algorithm for
each node not yet visited/put into a MST).

Should add in overview/explanations than "Seen" array/check can be
avoided if we set cost to "infinity" for unseen nodes (in algorithms
other than BFS/DFS)



See test5
After much experimentation, this illustrates non-optimality of
inadmissible heuristics:
gcc -DALGORITHM=4 -DWEIGHT=2 -DHEURISTIC=1 gsearch.c -lm
versus
gcc -DALGORITHM=4 -DWEIGHT=2 -DHEURISTIC=2 gsearch.c -lm
(actually, *rounded* Euclidean/HEURISTIC=2 is not admissible either due
to rounding): 45 degree line with nodes at each point has weight one
per edge (1.41 is rounded down) but if we skip a node the weight is 3
(2.82 is rounded up). Really need two Euclidean measures for
admissibility - heuristic rounds down always, weight???

If we use ceiling instead of rounding Euclidean weights+heuristc is
should be admissible - will change (example above doesn't quite work
with current graph - equal cost paths)


