\Note{  REAL specification of depth first search of graphs
\Note}

\Note{ There are several graph search algorithms that lead up to A*
and we present them in a consistent way to show their similarities.
DFS could be presented using simpler code etc (eg, recursive).
\Note}

\Note{
Suggested visualisation:

For consistency with the other search algorithms the graph could be
layed out on a grid (not visible), used for determining edge cost and
heuristic values for other algorithms. Colours/... can distinguish finished,
frontier and other nodes. Edges in chosen paths highlighted.

Use array for frontier, next to be selected at the left.
\Note}

\Overview{

Depth first search (DFS) for graphs can be used to find a path from
a single start node to either a single end node, one of several end
nodes, or all nodes that are connected (depending on the termination
condition). It is one of several algorithms that can be viewed as having
a similar structure. Some of these work with weighted graphs, where
the aim is to find the shortest path(s) but DFS ignores weights. These
algorithms can be used for both directed and undirected graphs; here we
use undirected graphs for simplicity.  The algorithms find a single path
from the start node to numerous nodes and the way paths are represented
is for each node to point to the previous node in the path (so paths are
actually reversed in this representation and essentially we have a tree
with "parent" pointers and the start node at the root).

All these algorithms classify nodes into three sets as they progress.
They are the nodes for which the final path has been found, "frontier"
nodes that are connected to the finalised nodes by a single edge, and
the rest of the nodes, which have not been encountered yet. The
algorithms repeatedly pick a frontier node and move it to the set of
finalised nodes and update various things (for example, and neighbours
of this node that have no previously been encountered must be added to
the frontier set).

DFS can be coded recursively but here we give an iterative version because
illustrates the similarity with the other algorithms. DFS uses a stack of
nodes that includes all the frontier nodes plus some that may have been
finalised already. At each stage the top node is popped off the stack. If
it has been finalised already it is ignored, otherwise it is finalised
and its neighbours that have not been finalised are added to the stack.

XXX??? Here we number all nodes for simplicity and we can use arrays
in the representation. For many important applications, particularly in
artificial intelligence, the graphs can be huge. Arrays are impractical
for representing the graph and only finalised and frontier nodes are
represented explicitly.

\Overview}

\Code{
Main
DFS(G, start) // Given a graph G find path(s) from node start to an
        // end node.  It is assume the end node(s) are defined
        // separately; if there are no end nodes, paths to all connected
        // nodes are found. Nodes are number 1..n. Returns the Prev
        // array, which gives the previous node in the path start to the
        // node i (if one has been found; Prev[i] == 0 otherwise).
\In{
    initialise frontier with just the start node
    initialise other data structures \Ref Init
    while frontier not Empty 
    \In{
        remove next node n from frontier \Ref Next_node
        for each node m neighbouring n // G has edge from n to m
        \In{
            update frontier with m
        \In}
    \In}
\In}
\Code}

\Code{
Init
    initialise Prev array to all zeros
    Prev[start] <- start // special case: start points to itself
\Code}

\Code{
Update
for each (i,j) in E 
\Expl{  Now that i gets included in the tree, we need to check the edge 
        to each of its neighbours j.
\Expl}
\In{
    if j is in PQ and weight(i,j) < Cost[j] 
    \Expl{  The inclusion of i may have brought i's neighbour j closer 
            to the tree; if so, update the information we have about j.
    \Expl}
    \In{
        Cost[j] <- weight(i,j)                                  
        \Expl{  The new cost for j is its distance to i.
        \Expl}
        Update(PQ, j, Cost[j])                                   
        \Expl{  Rearrange PQ so the priority queue reflects j's new cost.
        \Expl}
        \Note{  This may change the min cost; animation should reflect this
        \Note}
        Parent[j] <- i                                            
        \Expl{  Record the fact that j's closest neighbour in the 
                spanning tree (so far) was i.
        \Expl}
    \In}
\In}
\Code}

\Note{  The following is an implementation in C:
#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

#define infty INT_MAX
#define SIZE 10         /* Allow for graphs with up to 9 vertices */
typedef int vertex;

int weight[SIZE][SIZE]; /* The input: a weighted graph */
int cost[SIZE];         /* Keeps track of current cost for each vertex */
int pending[SIZE];      /* pending = 1 iff vertex not yet included in tree */
vertex parent[SIZE];    /* Specifies the spanning tree */
vertex pq[SIZE];        /* The priority queue */
int pq_start;           /* The start of the priority queue */
int n;                  /* The actual number of vertices */
 
void pq_sort() {
    int i, j, v;
    for (i = pq_start + 1; i<=n; i++) {
        v = pq[i];
        for (j = i-1; j >= pq_start && cost[v] < cost[pq[j]]; j--)
            pq[j+1] = pq[j];
        pq[j+1] = v;
    }
} 

void pq_update(int i) {
    int j, w;
    for (j=1; j<=n; j++) {
        w = weight[i][j];
        if (w > 0 && pending[j] && w < cost[j]) {
            cost[j] = w;
            pq_sort();
            parent[j] = i;
        }
    }
}
         
void prim() {
    int i;

    for (i=1; i<=n; i++) {
        cost[i] = infty;
        parent[i] = 0;
        pending[i] = 1;
    }
    cost[1] = 0;
    
    for (i=1; i<=n; i++)  /* Initialise the priority queue */
        pq[i] = i;
    pq_start = 1;
    while (pq_start <= n) {
        i = pq[pq_start]; /* Select node i with minimal cost */
        pending[i] = 0;   /* Add i to spanning tree */
        pq_start++;       /* Remove i from priority queue */
        pq_update(i);     /* Update costs of i's neighbours in priority queue */
    }
}

int main() {
    int i, j;
    scanf("%d",&n);
    for (i=1; i<=n; i++)
        for (j=1; j<=n; j++)
            scanf("%d", &weight[i][j]);
    
    prim();
    
    printf("Spanning tree:\n");
    for (i=1; i<=n; i++) {
        for (j=1; j<=n; j++)
            if (i == parent[j] || j == parent[i])
                printf("%d  ", weight[i][j]);
            else
                printf("0  ");
        printf("\n");
    }

    return 0;
}
 
/* Example of test input with 5 vertices (must be less than 10):

5
0  2  6  0  0
2  0  6  5  7
6  6  0  1  4
0  5  1  0  3
0  7  4  3  0

This yields the following output:

Spanning tree:
0  2  0  0  0
2  0  0  5  0
0  0  0  1  0
0  5  1  0  3
0  0  0  3  0

*/
\Note}

