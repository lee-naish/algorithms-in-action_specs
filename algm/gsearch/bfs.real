\Note{  REAL specification of breadth first search for graphs
\Note}




\Note{ There are several graph search algorithms that lead up to A*
and we present them in a consistent way to show their similarities.
Prim's MST tree is also similar.
\Note}

\Note{ At present, this overview is a bit long, but not overly verbose.  We
might want to see how it shows up on an AIA screen (we don't really want it to 
require a lot of scrolling), and also what the possibilities are for widening the 
Overview screen temporarily while reading, then reseting for the animation.
\Note}

\Note{
Suggested visualisation:


For consistency with the other search algorithms the graph could be
laid out on a grid (not visible), used for determining edge cost and
heuristic values for other algorithms. Colours or hue saturation... can distinguish
finished, frontier and other nodes. Edges in chosen paths highlighted. (n.b.
A previous group looked into color differentiation for people with aberrant
color vision -- consult that for appropriate contrast if using colors.)

During development it might be desirable to have multiple graph displays - the display suggested
above plus the previously implemented display. Once development of the module has been completed, the
visualization above would be preferred, as it is probably clearer. 


We also need to display the array "Parent" and the queue.
The array should be shown as a table:

    i            1      2      3      ...
    Parent[i]


Use (variable length) array for queue, next to be selected at the left.
It probably shouldn't align with the table above and should be
differentiated somehow as the Nodes queue elements are not related to
the i indices above (unlike the way we display priority queues in other
algorithms). Eg:

       Nodes queue:  4   3  5  8
\Note}

\Overview{

\Note{XXX Lee: I've changed the order here, to put the specific (BFS)
before the general (related algorithms), as a hook for student attention. 
See what you think.
\Note}

Breadth first search (BFS) for graphs can be used to find a path from
a single start node to either a single end node; to one of several end
nodes; or to all nodes that are connected to the start node, depending on the termination
condition. BFS returns the path to this (these) node(s) 
that can be reached with the minimum number of edges traversed, regardless of 
edge weights.

BFS is one of a related group of algorithms that traverse a graph, visiting every 
node no more than once, and can be viewed as having a similar
structure.  Others of these algorithms work with weighted graphs (with positive weights
for all edges), where the aim is to find the least cost path(s), while Prim's
and Kruskal's algorithms find a minumum spanning tree of the graph (the least cost 
path that connects all edges).  

\Note{XXX Lee How could we include DFS in the above description of other algorithms?
\Note}

These graph search algorithms can be used for both directed
and undirected graphs; in AIA we use undirected graphs for simplicity.
Paths are represented by having each node point to the previous
"parent" node in the path, so 
we have a tree with "parent" pointers and the start node at the
root, that is a tree of reversed paths. This allows these algorithms to return
multiple end nodes that each have a single path from the start node. 
BFS will find paths with
the minimum number of edges. 

As these algorithms execute, we can classify nodes into three sets.
These are:

 
-- "Finalised" nodes, for which the shortest or least costly path back to the start node has already
been finalised, that is the final parent node has been determined and is recorded;

--"Frontier" nodes, that are not finalised but are connected to a finalised node by a single edge; and

-- The rest of the nodes, which have not been seen yet. 

The frontier nodes are stored explicitly in a data structure.
Some of the algorithms also need a way to check if a node has already been seen and/or finalised.

The frontier initially contains just the start node. The algorithms repeatedly
pick a frontier node, finalise the node (its current parent becomes
its final parent) and update information about the neighbours of the node.
BFS uses a queue for the frontier nodes.  At each stage the node at the front of the
queue is removed for processing, and its neighbors that have not yet been seen
are added to the end of the queue. Other algorithms use other data structures to keep track 
of the frontier nodes.



Here we number all nodes for simplicity so we can use arrays for the
graph representation, the parent pointers, etc.  For many important
applications, particularly in artificial intelligence, the graphs can
be huge and arrays are impractical for representing the graph so other
data structures are needed.
\Overview}

\Code{
Main
BFS(G, s) // Given a graph G find a path from start node s to an
        // end node.  It is assumed the end node(s) are defined
        // separately; if there are no end nodes, paths to all connected
        // nodes are found. Nodes are numbered 1..nmax. Returns the Parent
        // array, which gives the previous node in the path from s to the
        // node i (if one has been found; Parent[i] = 0 otherwise).
\In{
    initialise, with fontier={s}, stored in Nodes \Ref Init
    while Nodes not empty
    \In{
        remove next node n from Nodes and finalise it \Ref Next_node
        // The Parent of n has now been determined
        if task_completed(n) \Ref Completed
        \Expl{ If there are no end nodes the whole connected component
               of G will be explored and we can skip this "if".
        \Expl}
        \In{
            return
            \Expl{ If there may be several end nodes we may want to
                   return which one is found as well as the Parent array.
            \Expl}
        \In}
        for each node m neighbouring n // G has edge from n to m
        \In{
            update Nodes, Parent etc with n & m \Ref UpdateNodes
        \In}
    \In}
    return
    \Expl{ The whole component of the graph connected to s has been
            explored. If we were searching for an end node we have failed
            and some indication of this should be returned.
    \Expl}
\In}
\Code}

\Code{
Init
    initialise each element of array Parent to zero
    initialise each element of array Seen to False
    Seen[s] <- True      // Initially we have seen only the start node
    Nodes <- queue containing just s
\Code}

\Code{
Next_node
    n <- dequeue(Nodes) // remove the front element of the Nodes queue
\Code}

\Code{
Completed
    if is_end_node(n)
    \Expl{ If we were searching for an end node we have succeeded!
        If we just want to traverse the whole graph component connected
        to s, we can skip this "if".
    \Expl}
\Code}

\Code{
UpdateNodes
    if not Seen[m]
    \In{
        Seen[m] <- True
        Parent[m] <- n
        enqueue(Nodes, m) // add m to back of Nodes queue
    \In}
\Code}

\Note{
We have C code that implements Prim's plus several graph search
algorithms, depending on compilation flags.
\Note}

