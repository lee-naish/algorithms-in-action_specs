\Note{  REAL specification of Prim's algorithm
\Note}

\Note{ There are several graph search algorithms that lead up to A*
and we present them in a consistent way to show their similarities.
Prim's MST tree is also similar.
\Note}

\Note{
Suggested visualisation:

For consistency with the other search algorithms the graph could be
layed out on a grid (not visible), used for determining edge cost and
heuristic values for other algorithms. Colours/... can distinguish
finished, frontier and other nodes. Edges in chosen paths highlighted.

Could possibly have multiple graph displays - the one above plus the
previously implemented one. The one above is probably preferred as it's
visually clearer.

We also need to display the arrays "Parent" and "Cost" (for the PQ).
The arrays should be shown as a table, with an indication that the Cost
array represents the PQ:

    i            1      2      3      ...
    Parent[i]
    Cost[i]

When changes are made to the array values, a box showing the table entry
in the array should light up, and also the value.  The PQ could be shown
as a box around the Cost array, with the minimum element indicated in some
way; as elements of the priority queue are removed they can be removed
from the display.  Thus the Cost array will have gaps for some elements
are they are removed (these values are never needed again in the algorithm).
\Note}

\Overview{
A minimal spanning tree of a weighted connected graph G is a connected
subgraph of G that includes all the nodes but minimises the total
weight of all the edges. It is guaranteed to be acyclic, so it is a
tree, and there may be more that one (with the same minimal weight).

Prim's algorithm can find a minimal spanning tree for the component of
a graph G connected to start node s, or a minimum spanning forest for
the whole graph (depending on the termination condition).
It is one of several algorithms that can be viewed as having a similar
structure. Some of these aim to find a path or the shortest path(s) from the
start node to an end node/all nodes in the component; some (including
Prim's) use weighted graphs and some use directed
graphs (AIA uses undirected graphs for simplicity).
The way paths are represented is for each node to point to the previous
node in the path, so paths are actually reversed in this representation
and we have a tree with "parent" pointers and the start node at the
root. This allows multiple nodes to each have a single path returned
and is also a convenient representation of a spanning tree.

As all these algorithms execute, we can classify nodes into three sets.
They are the nodes for which the final parent node has been found (this
is a region of the graph around the start node), "frontier" nodes that
are not finalised but are connected to a finalised node by a single edge,
and the rest of the nodes, which have not been seen yet. The frontier
nodes are stored explicitly in some data structure and some algorithms
also need some way to check if a node has been seen and/or finalised. The
frontier initially contains just the start node. The algorithms repeatedly
pick a frontier node, finalises the node (its current parent becomes
its final parent) and updates information about neighbours of the node.

Prim's uses a priority queue (PQ) for the frontier nodes, the
priority/cost based on how close the node is to a finalised node.  At each
stage the node that is closest to a finalised node (has the lowest weight
edge) is removed from the PQ and finalised; its neighbours in the frontier
may now be closer to a finalised node so their costs need to be updated
(and other neighbours must be added to the frontier).

In the presentation here, we do not give details of how the priority
queue is implemented, but just emphasise it is a collection of nodes
with associated costs and the node with the minimum cost is selected each
stage. When elements disappear from the Cost array it means the element
has been removed from the priority queue (the value is not used again).
The pseudo-code is simpler if nodes that are yet to be seen are also
put in the PQ, with infinite cost, which we do here.

Here we number all nodes for simplicity so we can use arrays for the
graph representation, the parent pointers, etc.  For many important
applications, particularly in artificial intelligence, the graphs can
be huge and arrays are impractical for representing the graph so other
data structures are needed.
\Overview}

\Code{
Main
Prim(G, s)  // Given a weighted graph G, return minimum spanning tree for
            // component including node s, represented using array Parent[]
\In{
    initialise, with fontier={s}, stored in Nodes \Ref Init
    while Nodes not empty
    \In{
        remove next node n from Nodes and finalise it \Ref Next_node
        // The Parent of n has now been determined
        if task_completed(n) \Ref Completed
        \Expl{ If we want a MST for just one component we may be able to
                finish here, otherwise we can skip this "if".
        \Expl}
        \In{
            return
        \In}
        for each node m neighbouring n // G has edge from n to m
        \In{
            update Nodes, Parent etc with n & m \Ref UpdateNodes
        \In}
    \In}
    return
    \Expl{ A minimal spanning forest for the whole graph has been found.
    \Expl}
\In}
\Code}

\Code{
Init
    initialise each element of array Parent to zero
    initialise each element of array Cost to infinity
    Cost[s] <- 0
    Nodes <- PQ containing all nodes // only s has finite cost
    \Note{ Nodes in the PQ with finite cost are in the frontier; others
        are yet to be seen.
    \Note}
\Code}

\Code{
Next_node
    n <- RemoveMin(Nodes) // remove lowest cost element of Nodes PQ
    \Expl{ n is the node in the frontier closest to a finalised
            node (if it has infinite cost it must be in a component not
            connected to s; not actually in the frontier).
    \Expl}
\Code}

\Code{
Completed
    if Cost[n] = infinity
    \Expl{ The MST of the component containing s has been found!
        If we just want a minimal spanning forest the whole graph 
        we can skip this "if" and continue until Nodes is empty.
    \Expl}
\Code}

\Code{
UpdateNodes
    if m is in Nodes PQ and weight(n,m) < Cost[m]
    \Expl{  Adding n to the MST may have brought n's neighbour m closer 
            to the tree; if so, update the information we have about m.
            If Cost[m] = infinity it will be replaced with a finite weight,
            implicitly moving m from the unseen nodes to the frontier.
    \Expl}
    \In{
        Cost[m] <- weight(n,m) // new cost is distance from n
        UpdateCost(Nodes, m, Cost[m]) // update cost in Nodes PQ
        Parent[m] <- n
        \Expl{ m's closest neighbour in the MST (so far) is n.
        \Expl}
    \In}
\Code}


\Note{
We have C code that implements Prim's plus several graph search
algorithms, depending on compilation flags.
\Note}

