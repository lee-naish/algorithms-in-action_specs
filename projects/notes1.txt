Warshall to new graph layout (may also be issues with directed graphs
since they haven't been tested)

Hashing (Real mostly done for LP and double hashing)

mergesort for arrays BUP (Real + overview done + bookmarks for merge) -
lots of overlap with mergesort

Polish off current string searching algs

Linked list support

General stuff: colors, screen real-estate (eg, drop-down menu on
left,...), flesh out "More" (links etc), slider for progress and/or back
to start button.

Real needed for the following:

other balanced trees?
AVL trees
Splay trees

mergesort for lists?

minimax, alpha-beta? 

Radix exchange sort (very similar to quicksort, might want to adjust
stack a bit due to lack of gaps for pivot elements; can add same stack
code for mergesort perhaps, depending on screen space)

Distribution counting, Straight radix sort???


Tries?

Maxflow (naive/Ford-Fulkerson; relies on BFS/DFS)?

---------------------------------------------------------------
DONE: Kruskal's, Recursive DFS, mergesort for arrays TD,
Prim's with new graph layout and common structure

pre 2023s2 ---------------------------------------------------------------

DONE: 234 trees (Real ready to go)
then...?

UF DONE: Union-find (Real ready to go)
then Kruscal's? or same group does Union-find and 234 trees and another does
Kruscal's (eg graph layout group)?

Hashing (Real status?)

QS DONE: Quicksort recursion
then mergesort TD/BUP... (Real needs to be done)
(idea is to start with ~working code and get the recursive stuff working
better because a very similar structure is used for TD mergesort)

LAYOUT DONE: Graph layout - can start with current version of Prim's
then...? New version of Prim's perhaps and document interface/conversion
well??? New version of Prim's should be like Dijkstra etc

DONE (not Prims): Graph search etc: Prim's, BFS, DFS?, Dijkstra, A*
(could possibly start with current graph layout from Prim's then later
convert; leave Prim's for graph layout group; if so, maybe start with
Dijkstra)


For intern:
DONE: Bug fixing etc: forward then back == noop, visibility of vars etc that are not
visible in pseudocode, ...? (may need more data structures/methods/guidelines)


